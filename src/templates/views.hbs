<div class="container">
  <div class="row">
    <div class="section">
      <h3 class="orange-text">Routers &amp; Views</h3>
      <p class="flow-text">
        Most Backbone tutorials start off talking about Models and Collections,
        but I'm going to try something a little different and start at the other
        end so we can start seeing something happen. We'll put together a simple
        router and then build our first view, all while watching our progress in
        the browser. Hooray for visuals! So fire up your favorite text editor
        (I prefer <a href="https://atom.io">Atom</a>, an awesome free, hackable
        editor from GitHub) and let's get rolling.
      </p>
    </div>

    <div class="divider"></div>
    <div class="section">
      <h4 class="orange-text">Base HTML Page</h4>
      <p class="flow-text">
        With all the talk about JavaScript, it may have been easy to forget that
        we're still serving a web page. To that end, we still need to deliver an
        HTML document so that the browser can know where to get our JavaScript
        and CSS and upon which we will hang new DOM elements. Well, open up your
        <code>dist/index.html</code> file and add the following:
      </p>
      <div class="code">
        <pre><code>&lt;!DOCTYPE html&gt;
&lt;html&gt;
  &lt;head&gt;
    &lt;meta charset="utf-8"&gt;
    &lt;title&gt;Modern Backbone&lt;/title&gt;
    &lt;link rel="stylesheet" href="//cdnjs.cloudflare.com/ajax/libs/materialize/0.96.1/css/materialize.min.css"&gt;
    &lt;link rel="stylesheet" href="style.css"&gt;
  &lt;/head&gt;
  &lt;body&gt;
    &lt;header&gt;Header&lt;/header&gt;
    &lt;main&gt;Main&lt;/main&gt;
    &lt;footer&gt;Footer&lt;/footer&gt;
    &lt;script src="app.js"&gt;&lt;/script&gt;
  &lt;/body&gt;
&lt;/html&gt;</code></pre>
      </div>
      <p class="flow-text">
        This will give us the basic skeleton of our page, and we can render it
        in the browser as is and then watch it slowly change as we add
        functionality. Run the <code>dev</code> script:
      </p>
      <div class="code">
        <pre><code>npm run dev</code></pre>
      </div>
      <p class="flow-text">
        Then go to <code>http://localhost:8010/</code> in your browser and you
        should see the following:
      </p>
      <div>
        <img class="responsive-img" src="img/1.png" alt="Bare HTML Page" />
      </div>
      <p class="flow-text">
        Finally something to look at!
      </p>
    </div>

    <div class="divider"></div>
    <div class="section">
      <h4 class="orange-text">Routers</h4>
      <p class="flow-text">
        Okay, that isn't very exciting to look at, but you've got to start
        somewhere. Now we're ready to dig into some Backbone at last, and we're
        going to start with the concept of the router. Routers are what takes
        care of translating URL paths into different views, and work the same
        client-side as they would server-side. Many people use the Backbone
        router as the top-level organizer of their app as well, and we're going
        to do the same. Open up <code>src/app.js</code> and let's get to work.
      </p>
      <p class="flow-text">
        First we have to start off with a little boilerplate to import all the
        components we're going to need. Add this to the top of the file:
      </p>
      <div class="code">
        <pre><code>let $ = require('jquery'),
    Backbone = require('backbone'),
    Handlebars = require('hbsfy/runtime');

Backbone.$ = $;</code></pre>
      </div>
      <p class="flow-text">
        Those lines import all the stuff we'll need, using require in CommonJS
        style. We'll jQuery and Backbone on this page, and while we won't use
        Handlebars directly (imported via the HBSfy runtime version, which is
        smaller), I'm leaving that there because that's the version of
        Handlebars with which you'll want to register any Hanlebars helpers that
        you write. The last line tells Backbone where to find jQuery for it's
        selector library shortcuts.
      </p>
      <p class="flow-text">
        Next in good ES6 style, we're going to declare our custom router class,
        which will extend Backbone's own router class. While Backbone is fully
        compatible with ES6, it maintains ES5 compatibility too, which means
        that we won't use the new ES6 <code>constructor()</code> method and
        instead will override the <code>initialize()</code> method that was
        around before ES6 came along. We'll start the method off with a call to
        the parent class's version of <code>initialize()</code> and then add a
        single line of code:
      </p>
      <div class="code">
        <pre><code>class AppRouter extends Backbone.Router {
  initialize(options) {
    super.initialize(options);
    this.route('', 'home');
  }
}</code></pre>
      </div>
      <p class="flow-text">
        We're registering our first route, which matches a path segment in the
        URL that consists of an empty string, which would be a bare URL. It then
        tells Backbone to look for a method on the router called
        <code>home</code>.<br>
        <span class="note">
          NOTE: You'll notice that I accepted <code>options</code> as an
          argument to the initialize function without doing anythign with it
          other than passing it straight through to <code>super</code>. We won't
          be using options in any of our code here, but it's good practice to
          include it because it makes it much easier to pass an option to an
          <code>initialize()</code> method (and all the other methods we'll be
          writing) down the road when you've included it in all of your method
          signatures. We'll continue that convention throughout the tutorial for
          any overrides of Backbone functions.
        </span><br>
        Let's write a really simple <code>home()</code> method now:
      </p>
      <div class="code">
        <pre><code>home(options) {
  console.log('Now we are rolling');
}</code></pre>
      </div>
      <p class="flow-text">
        This method is solely to show you that things are working, and isn't how
        one would typically use a route function. But we're close to having
        Backbone actually do something for us, so let's add one last function to
        our router:
      </p>
      <div class="code">
        <pre><code>start() {
  Backbone.history.start({pushState: true});
}</code></pre>
      </div>
      <p class="flow-text">
        This method makes a call to <code>Backbone.history</code> and tells it
        to start running, meaning Backbone will start controlling navigation.
        It includes the <code>{pushState: true}</code> argument to tell it to
        use the HTML5 API of the same name that lets JavaScript update the URL
        and browser history as if normal navigation happened. Pretty fancy, huh?
      </p>
      <p class="flow-text">
        With our class complete (for now), we just need to instantiate an
        instance of it, and then call <code>start()</code> on it, kicking
        things off. We'll lean on jQuery's document-ready functionality to make
        sure that the page is done loading so we know it'll be safe to start
        messing with the DOM. With all of these pieces, here's what our file
        should like so far:
      </p>
      <div class="code">
        <pre><code>let $ = require('jquery'),
    Backbone = require('backbone'),
    Handlebars = require('hbsfy/runtime');

Backbone.$ = $;

class AppRouter extends Backbone.Router {
  initialize(options) {
    super.initialize(options);
    this.route('', 'home');
  }
  start() {
    Backbone.history.start({pushState: true});
  }
  home(options) {
    console.log('Now we are rolling');
  }
}

let app = new AppRouter();
$(app.start);</code></pre>
      </div>
      <p class="flow-text">
        Refresh the page in your browser (Watchify and Serve should still be
        running via the <code>dev</code> script), open your dev console
        (<code>command-option-C</code> in most browsers, on Mac) and you should
        see the following:
      </p>
      <div>
        <img class="responsive-img" src="img/2.png" alt="Printing to the console" />
      </div>
      <p class="flow-text">
        Backbone is working!
      </p>
    </div>

    <div class="divider"></div>
    <div class="section">
      <h4 class="orange-text">Views</h4>
      <p class="flow-text">
        Well this page is pretty boring, so let's make our first View. A View is
        an object that is responsible for managing an element in the DOM. It can
        be associated with a Model (a single data instance) or be free-standing,
        and it also responds to and reports UI events. We're going to use one to
        replace the header with something more interesting. Views use a template
        from which to generate HTML and insert it into a DOM element, so we're
        going to start with one of those.
      </p>
      <p class="flow-text">
        Create a new directory inside your <code>src</code> directory called
        <code>templates</code>. Inside, make a file called
        <code>header.hbs</code> (the hbs is for Handlebars!) and place the
        following HTML inside:
      </p>
      <div class="code">
        <pre><code>&lt;div class='navbar-fixed'&gt;
  &lt;nav class='top-nav'&gt;
    &lt;div class='container'&gt;
      &lt;div class='nav-wrapper'&gt;
        &lt;a href='/' class='brand-logo center'&gt;Modern Backbone&lt;/a&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/nav&gt;
&lt;/div&gt;</code></pre>
      </div>
      <p class="flow-text">
        Handlebars can do fancier stuff, but it's perfectly happy with vanilla
        HTML as well, which is what we have here (just a bunch of stuff from the
        Materialize library that will create a fixed top navbar). We'll be doing
        a bunch of small templates like this, and then Backbone will be
        responsible for stitching them all together via the Views, and we can
        now write our first one. Make a new file in the <code>src</code>
        directory called <code>header.js</code>. First, we need to import
        Backbone in this file, and then we're going to need to import the
        template we just created:
      </p>
      <div class="code">
        <pre><code>let headerViewTemplate = require('./templates/header.hbs');</code></pre>
      </div>
      <p class="flow-text">
        Then create our <code>HeaderView</code> class, extending the built-in
        <code>Backbone.View</code> class. We only need to override a single
        method here:
      </p>
      <div class="code">
        <pre><code>class HeaderView extends Backbone.View {
  render() {
    this.$el.html(headerViewTemplate());
    return this;
  }
}</code></pre>
      </div>
      <p class="flow-text">
        The <code>render()</code> method is what actually make the View create a
        DOM element. It uses <code>this.$el</code>, which is a reference to the
        jQuery-fied version of the View's DOM element (courtesy of those
        shortcuts I was talking about earlier), and replaces the element's HTML
        content with the output of the template (notice that we have to invoke
        the template, which is now a function thanks to our HBSfy precompiler).
        By convention, we return <code>this</code> from all render functions in
        order to allow for method chaining, which you'll see soon.
      </p>
      <p class="flow-text">
        The last thing we need to add to our file is an export statement, which
        is how you tell Node/Browserify what part of the file should be made
        available to other files for importing. With the export at the bottom,
        the file should now look like this:
      </p>
      <div class="code">
        <pre><code>let Backbone = require('backbone');

let headerViewTemplate = require('./templates/header.hbs');

class HeaderView extends Backbone.View {
  render() {
    this.$el.html(headerViewTemplate());
    return this;
  }
}

module.exports = HeaderView;</code></pre>
      </div>
    </div>

    <div class="divider"></div>
    <div class="section">
      <h4 class="orange-text">Rendering Our First View</h4>
      <p class="flow-text">
        We've created a View and Template, but they're not connected to
        anything, so let's do that. Head back over to <code>app.js</code> and
        let's import our View at the top of the file:
      </p>
      <div class="code">
        <pre><code>let HeaderView = require('./header');</code></pre>
      </div>
      <p class="flow-text">
        Since we're going to be displaying this header on every page, we're
        going to initialize AND render it inside our router's
        <code>initialize()</code> method so that multiple versions of it will
        not get created (these would be called "zombie" views, and can
        become a problem if you lose track of references). Add the following
        lines to <code>initialize()</code>:
      </p>
      <div class="code">
        <pre><code>this.headerView = new HeaderView({el: $('header')});
this.headerView.render();</code></pre>
      </div>
      <p class="flow-text">
        We make the headerView a property on the router so we can keep track of
        it (we won't be doing anything else fancy to it in this tutorial, but
        you should always keep some kind of reference to your views so you can
        call <code>remove()</code> on them when you're done with them). We pass
        the <code>{el: $('header')}</code> argument to tell the View to anchor
        on a pre-existing element in the DOM (the <code>header</code> element
        we put in the base HTML), using the jQuery selector function. With those
        two additions, refreshing the browser should show you the first proof
        that Backbone is manipulating your DOM:
      </p>
      <div>
        <img class="responsive-img" src="img/3.png" alt="Header by Backbone" />
      </div>
      <p class="flow-text">
        Woah, that's some browser inception right there!
      </p>
    </div>


    <div class="divider"></div>
    <div class="section">
      <h4 class="orange-text">The Long Way Around</h4>
      <p class="flow-text">
        That might've seemed like the long way around to get a simple HTML
        element on the page, but now you've gotten a taste of how Backbone
        works. Next, we're going to do something a little more dynamic, using
        Models, Collections, and Collection Views to store data and display it
        dynamically.
      </p>
    </div>

    <div class="row">
      <div class="col s6 left-align">
        <a href="setup.html" class="flow-text article-nav">
          <i class="mdi-navigation-arrow-back"></i> Settings Things Up
        </a>
      </div>
      <div class="col s6 right-align">
        <a href="models.html" class="flow-text article-nav">
          Models &amp; Collections <i class="mdi-navigation-arrow-forward"></i>
        </a>
      </div>
    </div>
  </div>
</div>
