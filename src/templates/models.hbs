<div class="container">
  <div class="row">
    <div class="section">
      <h3 class="orange-text">Models &amp; Collections</h3>
      <p class="flow-text">
        Now that we're getting somewhere, let's get to the meat of why people
        really like Backbone (and other client-side frameworks): data
        management. We're going to use a really simple example of using Models
        and Collections to populate our navigation, which we'll be putting in
        the footer. We'll be hard-coding our data for Model hydration, but you
        can also dynamically create data or even use the <code>fetch()</code>
        method on a collection to hit an API, which is when things really get
        interesting. But all of this should give you an idea of how to get
        started and then go crazy on your own.
      </p>
    </div>

    <div class="divider"></div>
    <div class="section">
      <h4 class="orange-text">Another Template, Another View</h4>
      <p class="flow-text">
        To set things up for our fancy footer, we're going to need to create
        another template and view, very similar to our first pair (and I'll move
        pretty quickly through this part). In <code>src/templates/</code> create
        a <code>footer.hbs</code> file and give it the following HTML:
      </p>
      <div class="code">
        <pre><code>&lt;div class='navbar-fixed'&gt;
  &lt;nav class='bottom-nav'&gt;
    &lt;div class='container'&gt;
      &lt;div class='nav-wrapper'&gt;
        &lt;ul id="nav-list" class="left"&gt;
        &lt;/ul&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/nav&gt;
&lt;/div&gt;</code></pre>
      </div>
      <p class="flow-text">
        The key part in there is the empty <code>ul</code>, to which we'll be
        dynamically adding things. Let's take a quick detour into
        <code>dist/style.css</code> and add the following CSS to trick this
        navbar into sticking to the bottom of window at all times:
      </p>
      <div class="code">
        <pre><code>footer &gt; div.navbar-fixed {
  position: absolute;
  bottom: 0;
}</code></pre>
      </div>
      <p class="flow-text">
        Now create a new file called <code>footer.js</code> in our
        <code>src</code> directory, and we'll create a FooterView that will
        start identically to the HeaderView:
      </p>
      <div class="code">
        <pre><code>let Backbone = require('backbone');

let footerViewTemplate = require('./templates/footer.hbs');

class FooterView extends Backbone.View {
  render() {
    this.$el.html(footerViewTemplate());
    return this;
  }
}

module.exports = FooterView;</code></pre>
      </div>
      <p class="flow-text">
        Head back to <code>app.js</code> and import the FooterView:
      </p>
      <div class="code">
        <pre><code>let HeaderView = require('./header'),
    FooterView = require('./footer');</code></pre>
      </div>
      <p class="flow-text">
        And add the instantiation and render code to the router's
        <code>initialize()</code> method:
      </p>
      <div class="code">
        <pre><code>this.footerView = new FooterView({el: $('footer')});
this.footerView.render();</code></pre>
      </div>
      <p class="flow-text">
        With all those changes, you should be able to refresh your browser and
        see the following:
      </p>
      <div>
        <img class="responsive-img" src="img/4.png" alt="Halfway to a Footer" />
      </div>
      <p class="flow-text">
        I know you're impressed.
      </p>
    </div>

    <div class="divider"></div>
    <div class="section">
      <h4 class="orange-text">Finally, Models</h4>
      <p class="flow-text">
        So we've made an empty container, and now we're finally ready to use a
        Model for something. Models are the basic unit of data storage in
        Backbone: they allow you to preserve state outside of the DOM. We're
        going to create a model to hold the information required for a
        navigation item: target (we're the item should send us), title (what the
        UI's view of the item should look like), and active (whether this is the
        currently selected navigation item). To do so, we're going to create a
        <code>NavItem</code> class inside <code>footer.js</code> (just below all
        the import statements) which will extend the <code>Backbone.Model</code>
        class. It's very common for custom Models to require almost no code,
        especially if you have a good API, and ours will be quite small:
      </p>
      <div class="code">
        <pre><code>class NavItem extends Backbone.Model {
  defaults() {
    return {
      active: false
    };
  }
}</code></pre>
      </div>
      <p class="flow-text">
        The <code>defaults</code> method allows you to set default values for
        any properties that are not defined during instantiation, which can be
        quite useful. We'll default all of the items to the inactive state since
        only one can be active at a time.
      </p>
      <p class="flow-text">
        A model by itself is not super useful, because in an MVC framework it
        can't know anything about display, so we need a Model View (a View that
        is tailored to displaying a Model in a specific context). It is possible
        for a Model to have many associated Views, like a preview version and a
        full detail version, which is why we keep Models from knowing anything
        about display (otherwise things would get very confusing in the Model
        code). As with our other views, we're going to start off by creating a
        template first. <code>src/templates/navItem.hbs</code>:
      </p>
      <div class="code">
        <pre><code>&lt;a href='\{{target}}.html'&gt;\{{title}}&lt;/a&gt;</code></pre>
      </div>
      <p class="flow-text">
        This is the first time you've seen a Handlebars template do something
        fancy: the <code>\{{target}}</code> and <code>\{{title}}</code> segments
        tell Handlebars to look into the rendering context (which is usually a
        JSON version of a Model's properties in Backbone) and replace each block
        with that property's value (remember we're putting <code>target</code>
        and <code>title</code> properties on the NavItem). Handlebars can do
        even fancier things, but that's as far as we're getting in this
        tutorial. This is also a really small template, which isn't unusual for
        repeated, granular bits of code.
      </p>
      <p class="flow-text">
        Now we need to create a matching View for this Template: the
        NavItemView. It's going to have some new View methods that we haven't
        seen yet. After importing <code>navItem.hbs</code> as
        <code>navItemViewTemplate</code>, place the following in
        <code>footer.js</code> under the <code>NavItem</code> class:
      </p>
      <div class="code">
        <pre><code>class NavItemView extends Backbone.View {
  tagName() {
    return 'li';
  }
  className() {
    return this.model.get('active') ? 'active' else null;
  }
  render() {
    this.$el.html(navItemViewTemplate(this.model.attributes));
    return this;
  }
}</code></pre>
      </div>
      <p class="flow-text">
        There are three things to note in this class. First is the
        <code>tagName()</code> method, which tells backbone to create new
        elements from this view of type <code>li</code>. You may remember we've
        got an empty <code>ul</code> in our <code>footer.hbs</code> to which we
        want to add content but that the <code>navItem.hbs</code> template
        didn't have anything about <code>li</code>. This is the first time we're
        creating brand new DOM elements from scratch (previously we'd inherited
        ones that pre-existed in the original HTML). When you create a new
        element in Backbone, it will default to be a <code>div</code> unless you
        specify otherwise. Second is the <code>className()</code> method, which
        is similar to <code>tagName()</code> in that it sets HTML attributes on
        newly-created DOM elements. Here, we add the <code>active</code> class
        if the underlying model has <code>active</code> set to <code>true</code>
        (<code>model.get(attributeName)</code> is how you access attributes on
        Backbone models). Third, we pass <code>this.model.attributes</code> to
        the Template invocation as an argument, which sends a JSON version of
        all the properties to the Template's rendering context for proper
        substitution. Whew!
      </p>
    </div>

    <div class="divider"></div>
    <div class="section">
      <h4 class="orange-text">Collections</h4>
      <p class="flow-text">
        All those Models and Model Views are nice, but they aren't going to
        create themselves, and this is where Collections come in. A Collection
        is an object that holds several Models of the same type and can send
        all of to render, sync them with a server, and several other useful
        functions. Our Collection isn't going to do a whole lot, but when you're
        using Backbone in the real world, the <code>fetch()</code> method will
        quickly become your friend. Place the following in
        <code>footer.js</code> underneath the <code>NavItemView</code> class:
      </p>
      <div class="code">
        <pre><code>class NavItemList extends Backbone.Collection {
  initialize(models, options) {
    this.model = NavItem;
    super.initialize(models, options);
  }
}</code></pre>
      </div>
      <p class="flow-text">
        A small class, but with a interesting distinction: this is the first
        time we've added something before the call to
        <code>super.initialize()</code>. We're setting the model property on the
        Collection, which tells Backbone which Model to use when attempting to
        hydrate new data into a Model. Backbone needs to know this before the
        <code>super.initialize()</code> method runs. Now, we can pass lists of
        plain JSON objects to the Collection constructor and they will turn into
        the proper Model during initialization.
      </p>
      <p class="flow-text">
        In the process of doing this, we've circled back around to the
        <code>FooterView</code>, which has secretly been a Collection View all
        along (a Collection View is like a Model View, but for Collections)!
        Now, we're going to give it its own <code>initialize()</code> method:
      </p>
      <div class="code">
        <pre><code>initialize(options) {
  super.initialize(options);
  this.collection = new NavItemList([
    {title: 'Home', target: 'home', active: true},
    {title: '1: Set-up', target: 'setup'}
  ]);
}</code></pre>
      </div>
      <p class="flow-text">
        And now we've come full circle: the Collection View creates a new
        <code>NavItemList</code> Collection, passing in a list of JSON objects,
        and the Collection then makes and stores some <code>NavItem</code>
        Models. Notice that the first object has <code>active</code> set to
        <code>true</code>, while the second relies on the
        <code>defaults()</code> to set that property to <code>false</code>. Our
        Collection View also needs an updated render function:
      </p>
      <div class="code">
        <pre><code>render() {
  this.$el.html(footerViewTemplate());
  let $list = this.$el.find('#nav-list');
  this.collection.forEach((item) => {
    $list.append(new NavItemView({model: item}).render().el);
  })
  return this;
}</code></pre>
      </div>
      <p class="flow-text">
        Here, we create the enclosing DOM element using the
        <code>footerViewTemplate()</code>, then we find the <code>ul</code> with
        the <code>nav-list</code> id, and finally we iterate through the View's
        Collection appending new <code>NavItemView</code> elements. You'll
        notice that we finally make use of the method chaining I was talking
        about earlier (returning <code>this</code> from the View's render
        method) in the <code>..render().el</code> sequence. This is very handy.
        You should note that is a slightly weird way to render a Collection
        View, as frequently you'll see a call to an <code>addOne()</code>
        method in place of the direct list appending; this is because you
        normally want to be able to respond automatically to new Models being
        added to the Collection and render them as they appear, but since our
        Collection won't change after instantiation, I took a shortcut. You can
        see that method in tons of other tutorials online though. With all that
        said, you should be able to re-fresh your browser and see the following:
      </p>
      <div>
        <img class="responsive-img" src="img/5.png" alt="Footer with links" />
      </div>
      <p class="flow-text">
        Seeing links makes me want to go golfing...
      </p>
    </div>


    <div class="divider"></div>
    <div class="section">
      <h4 class="orange-text">Are We There Yet?</h4>
      <p class="flow-text">
        So we've turned some models from raw data into pretty pictures in our
        browser. But we still can't really interact with our site yet (the links
        don't work, if you haven't tried them yet), and that's what we'll do
        next!
      </p>
    </div>

    <div class="row">
      <div class="col s6 left-align">
        <a href="views.html" class="flow-text article-nav" data-target='views.html'>
          <i class="mdi-navigation-arrow-back"></i> Routers &amp; Views
        </a>
      </div>
      <div class="col s6 right-align">
        <a href="events.html" class="flow-text article-nav" data-target='events.html'>
          Events & Navigation <i class="mdi-navigation-arrow-forward"></i>
        </a>
      </div>
    </div>
  </div>
</div>
